# 第451节课 Python学习手册第六部分：类和面向对象编程（OOP）：第29章：命名空间：结论
# 在Python中，命名空间是一个从名称到对象的映射。不同的命名空间可以独立存在，互不干扰。命名空间有多种类型，无点号的简单名称遵循第 17 章中介绍过的 LEGB 词能作用域规则。
# 包括以下几种：
#
# 1. **内置命名空间（Built-in Namespace）**：这是Python解释器创建的，包含了内置的函数和异常名。
#
# 2. **全局命名空间（Global Namespace）**：这是模块级别的命名空间，记录了模块级别的变量，包括函数、类、其他导入的模块、模块级的变量和常量。
#
# 3. **局部命名空间（Local Namespace）**：这是函数/方法级别的命名空间，记录了函数的变量，包括函数的参数和局部定义的变量。
#
# 当你在代码中使用一个未带点号的名称（例如 `X`）时，Python会在当前作用域（如果在函数内部，那就是局部命名空间；如果在模块级别，
# 那就是全局命名空间）中查找这个名称。如果在当前作用域找不到，Python会向上在外层作用域中查找，直到找到为止。如果在所有作用域中都找不到，Python会抛出一个 `NameError` 异常。
#
# 当你在代码中使用一个带点号的名称（例如 `object.x`）时，Python会在 `object` 对象的命名空间（也就是它的属性）中查找 `x`。
# 如果 `object` 是一个模块对象，那么它的命名空间就是全局命名空间；如果 `object` 是一个类或实例对象，那么它的命名空间就是它的属性。
#
# 有些作用域（例如模块和类）会用于初始化对象的命名空间。例如，当你定义一个类时，类体中的所有语句都会在一个新的命名空间（也就是类的命名空间）中执行，
# 这个命名空间用于生成类对象的属性。当你创建类的实例时，实例会继承类的命名空间中的所有属性。如果你在实例中添加新的属性，或者修改现有的属性，
# 那么这些改动只会影响实例的命名空间，不会影响类的命名空间。